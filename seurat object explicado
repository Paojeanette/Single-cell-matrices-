# script to demonstrate reading single cell matrices in various format 
# and converting to seurat object 
setwd('/Users/pao/Desktop/Prueba')

#Install libraries
#install.packages('Seurat')
#install.packages("devtools")
#devtools::install_github("mojaveazure/seurat-disk")


#Â¿QuÃ© hace SeuratDisk?
#Este paquete te permite convertir archivos entre formatos de objetos de Seurat y AnnData 
#(por ejemplo, de .h5ad a .rds o .h5Seurat).

#load libraries
library(Seurat)
library(SeuratDisk)


#-----------------------------------------------------------#
#-----------------------------------------------------------#

#.RDS format (ya es un seurat object)
#Primero lo abro y lo guardo en una variable
rds_obj <- readRDS('ependymal_cells.rds')

#Para ver lo que tiene adentro:
str(rds_obj) 



#-----------------------------------------------------------#
#-----------------------------------------------------------#

# 10x CellRanger .HDF5 format
hdf5_obj <- Read10X_h5(filename = '20k_PBMC_3p_HT_nextgem_Chromium_X_filtered_feature_bc_matrix.h5',
                       use.names = TRUE,
                       unique.features = TRUE)

seurat_hdf5 <- CreateSeuratObject(counts = hdf5_obj)
hdf5_obj[1:10,1:10]
str(seurat_hdf5)


# Cargar datos de expresiÃ³n gÃ©nica single-cell en formato .h5 generado por Cell Ranger (10x Genomics)
# Este archivo contiene la matriz de conteos con genes en filas y cÃ©lulas en columnas
hdf5_obj <- Read10X_h5(
  filename = '20k_PBMC_3p_HT_nextgem_Chromium_X_filtered_feature_bc_matrix.h5',
  use.names = TRUE,         # Usa los nombres de genes en lugar de IDs encriptados
  unique.features = TRUE    # Asegura que los nombres de genes sean Ãºnicos (importante si hay duplicados)
)

# Crear un objeto Seurat a partir de la matriz de conteos
# Este objeto es el formato principal con el que se trabaja en el paquete Seurat
seurat_hdf5 <- CreateSeuratObject(counts = hdf5_obj)

# Ver las primeras 10 filas (genes) y 10 columnas (cÃ©lulas) de la matriz de expresiÃ³n cruda
# Esto permite inspeccionar cÃ³mo estÃ¡n distribuidos los valores de conteo
hdf5_obj[1:10, 1:10]

# Al mostrar hdf5_obj[1:10, 1:10], vemos una "sparse matrix" (matriz dispersa),
# donde los puntos (.) representan ceros. Esto es tÃ­pico en datos single-cell,
# ya que la mayorÃ­a de los genes no se expresan en la mayorÃ­a de las cÃ©lulas.
# Por eso la matriz estÃ¡ mayormente vacÃ­a y optimizada para ahorrar memoria.


# Ver la estructura interna del objeto Seurat (es un objeto S4 con mÃºltiples slots)
# Incluye informaciÃ³n como las matrices de conteos, metadatos por cÃ©lula, y resultados del anÃ¡lisis
str(seurat_hdf5)

# ------------------------------------------------------------------------
# Validar si hay datos con conteo real (mayor a 0), ya que muchas celdas son ceros
# Esto es comÃºn en datos single-cell debido a la baja expresiÃ³n de muchos genes

# Contar cuÃ¡ntos genes tienen al menos una lectura (expresiÃ³n en alguna cÃ©lula)
sum(Matrix::rowSums(hdf5_obj) > 0)

# Contar cuÃ¡ntas cÃ©lulas tienen al menos una lectura (expresiÃ³n de algÃºn gen)
sum(Matrix::colSums(hdf5_obj) > 0)

# Obtener nombres de los primeros genes que tienen al menos una lectura
non_zero_genes <- rownames(hdf5_obj)[Matrix::rowSums(hdf5_obj) > 0]
head(non_zero_genes, 10)

# Mostrar los valores de esos genes expresados en las primeras 10 cÃ©lulas
hdf5_obj[non_zero_genes[1:10], 1:10]

#CELULAS CON MAS GENES EXPRESADOS
# Este bloque calcula la cantidad de genes detectados (conteo > 0) por cada cÃ©lula
# y nos permite identificar las cÃ©lulas mÃ¡s ricas en expresiÃ³n gÃ©nica.

# Calculamos cuÃ¡ntos genes tienen conteos > 0 por cÃ©lula
genes_por_celda <- Matrix::colSums(hdf5_obj > 0)

# Ordenamos de mayor a menor
orden_celdas <- sort(genes_por_celda, decreasing = TRUE)

# Mostramos las 10 cÃ©lulas con mÃ¡s genes expresados
head(orden_celdas, 10)

#GENES MAS EXPRESADOS EN TOTAL, EN TODAS LAS CELULAS
# Este otro bloque calcula la suma de la expresiÃ³n de cada gen en todas las cÃ©lulas,
# Ãºtil para detectar los genes mÃ¡s abundantemente expresados en el dataset.

# Calculamos el total de conteos por gen (suma en todas las cÃ©lulas)
expresion_total_genes <- Matrix::rowSums(hdf5_obj)

# Ordenamos de mayor a menor
orden_genes <- sort(expresion_total_genes, decreasing = TRUE)

# Mostramos los 10 genes mÃ¡s expresados
head(orden_genes, 10)


#-----------------------------------------------------------#
#-----------------------------------------------------------#

# .mtx file
#ReadMtx(mtx = '',
#        features = '',
#        cells = '')

list.files("raw_feature_bc_matrix")

mtx_obj <- ReadMtx(mtx = 'raw_feature_bc_matrix/matrix.mtx.gz',
        features = 'raw_feature_bc_matrix/features.tsv.gz',
        cells = 'raw_feature_bc_matrix/barcodes.tsv.gz')

mtx_obj[1:10,1:10]

seurat_mtx <-  CreateSeuratObject(counts = mtx_obj)

str(seurat_mtx)

# ðŸ§© Â¿QuÃ© hace ReadMtx()?
# Esta funciÃ³n carga una matriz de expresiÃ³n de un experimento de single-cell RNA-seq.
# Requiere tres archivos:
# 1. matrix.mtx.gz â†’ contiene la matriz de conteo (genes x cÃ©lulas) en formato sparse.
# 2. features.tsv.gz â†’ lista con los nombres o identificadores de los genes (una fila por gen).
# 3. barcodes.tsv.gz â†’ lista con los barcodes de las cÃ©lulas (una columna por cÃ©lula).
# Todos deben estar en la misma carpeta, normalmente llamada "raw_feature_bc_matrix" o similar.

#10 x 10 sparse Matrix of class "dgCMatrix"
#[[ suppressing 10 column names â€˜AAACCCAAGAAACACT-1â€™, â€˜AAACCCAAGAAACCAT-1â€™, â€˜AAACCCAAGAAACCCA-1â€™ ... ]]

#MIR1302-2HG . . . . . . . . . .

#Lo que muestra son los barcodes (Id de las celulas resumido arriba)
#Genes y conteos, como son cero, se transforman en puntos.


#-----------------------------------------------------------#
#-----------------------------------------------------------#

# .loom files (este no encontre como descargarlo)
#loom_oj <- Connect(filename = "adult-hem-organs-10X-bone-marrow.loom", mode = 'r')
#seurat_loom <- as.Seurat(loom_oj)





#-----------------------------------------------------------#
#-----------------------------------------------------------#


# Este archivo .h5ad es un AnnData: el formato estÃ¡ndar de Python (Scanpy) para datos de single-cell RNA-seq.
# Para analizarlo en R con Seurat, lo convertimos al formato h5Seurat.

# Paso 1: convierto .h5ad a .h5Seurat (estructura compatible con Seurat)
Convert("adata_SS2_for_download.h5ad", dest = "h5seurat", overwrite = TRUE)

# Paso 2: cargo el archivo convertido como un objeto Seurat
seurat_obj <- LoadH5Seurat("adata_SS2_for_download.h5seurat")

str(seurat_obj)
